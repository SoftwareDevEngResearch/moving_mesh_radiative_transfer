from numba import njit, types, prangeimport ctypesfrom numba.extending import get_cython_function_addressimport numpy as np@njit def integrate_quad(a, b, xs, ws, func1, func2):    return (b-a)/2 * np.sum(ws * func1((b-a)/2*xs + (a+b)/2) * func2((b-a)/2*xs + (a+b)/2))_dble = ctypes.c_doubleaddr = get_cython_function_address("scipy.special.cython_special", "__pyx_fuse_0_1eval_legendre")functype = ctypes.CFUNCTYPE(_dble, _dble, _dble)eval_legendre_float64_fn = functype(addr)# @njit("float64[:](float64,float64[:])")  @njitdef numba_eval_legendre_float64(n, x):      return eval_legendre_float64_fn(n, x)# @njit("float64[:](float64,float64[:],float64,float64)", looplift=False, parallel=False)@njitdef normPn(n,x,a=-1.0,b=1.0):    tmp = 0*x    for count in prange(x.size):        z = (b+a-2*x[count])/(a-b)        fact = np.sqrt((2*n+1)/(b-a)) #*(x>=a)*(x<=b)        # tmp[count] = sc.eval_legendre(n,z)*fact        tmp[count] = numba_eval_legendre_float64(n, z)*fact    return tmp    